/*
 * JSP generated by Resin-3.1.9 (built Mon, 13 Apr 2009 11:09:12 PDT)
 */

package _jsp._order;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.net.*;
import java.sql.*;
import java.text.*;
import common.util.*;
import dbconn.*;

public class _dsk_0po_0status_0excel__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, "/error.jsp", session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("application/vnd.ms-excel");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      
response.setHeader("Pragma","no-cache"); //HTTP 1.0
response.setDateHeader ("Expires", 0);
response.setHeader("Cache-Control","no-cache"); //HTTP 1.1

String scmid = "";
String scmnm = "";
String usertype = "";
String usergroup = "";
//String scmsubids = "";
String _adminid = "";
String _adminname = "";
String _admingroup = "";
String _apessid = "";
String _apessname = "";

try{
  scmid = (String) session.getAttribute("scmid");
  _adminid = (String) session.getAttribute("adminid");

  if( (scmid == null || scmid.length() == 0 || scmid.equals("null"))
      && (_adminid == null || _adminid.length() == 0 || _adminid.equals("null")) ) {
    response.sendRedirect("/login_first.html");
    return;
  }

  _adminname = (String) session.getAttribute("adminname");

  _apessid = (String) session.getAttribute("apessid");
  _apessname = (String) session.getAttribute("apessname");

  scmnm = (String) session.getAttribute("scmnm");

  usertype = (String) session.getAttribute("usertype");
  if (usertype == null) usertype = "";

  usergroup = (String) session.getAttribute("usergroup");
  if (usergroup == null) usergroup = "";

  //scmsubids = (String) session.getAttribute("scmsubids");
  //session.setMaxInactiveInterval(60*60);

}catch( Exception e ) {
  response.sendRedirect("/login_first.html");
  return;
}

      out.write(_jsp_string1, 0, _jsp_string1.length);
      
// Intranet DB
String _mysqlJdbcDriver = "com.mysql.jdbc.Driver";
String _urlLogin = "jdbc:mysql://10.2.1.247:3306/intranet";
String _userLogin = "intranet";
String _pwLogin = "tetris82";

// Futura DB
String _mssqlJdbcDriver = "com.microsoft.jdbc.sqlserver.SQLServerDriver";
String _urlFutura = "jdbc:microsoft:sqlserver://10.2.1.228:1433";
String _userFutura = "intranet";
String _pwFutura = "tetris";

// Uplod
String _uploadPath = "/var/tmp";
long _maxFileSize = 10*1024*1024;

// style image path
String _styleImgURL = "/image";

// Fault return invoice File URL
String _faultReturnInvoiceFileURL = "/image/Return";

// Memo \u00b0\u00fc\u00b7\u00c3 \u00ba\u00af\u00bc\u00f6
String _memoDataUrl = "/memo/upload";

// APESS SCM ID
String _apessID = "60171";

// Spec Sheet path
String _specSheetUrl = "/image/SPEC_SHEET";

// Spec Sheet upload path
String _specSheetUploadUrl = "/scan_spec_sheet";

// Sample Image Url
String _sampleIamgeUrl = "/image/SAMPLE_IMAGE";

// barcode file Image Url
String _barcodeFileUrl = "/image/Barcode";

// Invoice file path
String _invoiceFileUrl = "/order/inv_files";

// shipment file path
String _shipmentFileUrl = "/order/shipment_upload";

// Apess MU rate
double _MURate = 0.25;

// Ex-Factory Price Rate
double _EXRate = 0.04;


// Ex-Factory Price Rate for Apess2
double _EXRate2 = 0.04;

// Pronto DATA_AREA
//String _dataArea = "fft";
String _dataArea = "ffl";

// Pronto PIE Info
//String _pieIP = "10.2.1.226";
String _pieIP = "newffbpro.fastfuturebrands.com.au";
int _piePort = 7000;
//String _pieDataset = "apitest";
String _pieDataset = "apilive";

      out.write('\n');
      
response.setHeader("Content-Disposition", "attachment; filename=PO_History.xls;");
response.setHeader("Content-Description", "JSP Generated Data");

String MONEY_FORMAT = "###,##0.00";

String M = request.getParameter("M");
String ag_supplier = request.getParameter("ag_supplier");
String ag_brand = request.getParameter("ag_brand");
String ag_date_type = request.getParameter("ag_date_type");
String ag_from_date = request.getParameter("ag_from_date");
String ag_to_date = request.getParameter("ag_to_date");
String ag_status = request.getParameter("ag_status");
String ag_po_no = request.getParameter("ag_po_no");
String ag_style_no = request.getParameter("ag_style_no");
String ag_orderby = request.getParameter("ag_orderby");
String ag_buyer = request.getParameter("ag_buyer");
String ag_mr = request.getParameter("ag_mr");
String ag_invoice_no = request.getParameter("ag_invoice_no");

Connection connPronto = null;
dbconn.DBConnManager dbPool = null;
dbconn.MatrixDataSet matrix = null;
dbconn.DataProcess dataProcess = null;
String sql = "";
int iRet = 0;
String outS = "";

// query for po list
sql = " select  to_char(c.xpoa_ts_created+10/24, 'yyyy-mm-dd'), "
    + "         to_char(d.xpoa_ts_created+10/24, 'yyyy-mm-dd'), "
    + "         a.po_order_no, "
    + "         b.xspo_style, "
    + "         l.shm_description, "
    + "         case "
    + "           when a.po_order_status = '25' then 'Firm planned' "
    + "           when a.po_order_status between '40' and '80' then 'On order' "
    + "           when a.po_order_status = '90' then 'Completed' "
    + "           when a.po_order_status = '99' then 'Cancelled' "
    + "           else a.po_order_status "
    + "         end, "
    + "         to_char(a.po_order_date, 'yyyymmdd'), "
    + "         decode(to_char(b.ex_factory_date, 'yyyy'), '1900', '', to_char(b.ex_factory_date, 'yyyy-mm-dd')), "
    + "         to_char(a.po_arrival_date, 'yyyy-mm-dd'), "
    + "         f.sys_description, "
    + "         g.cr_shortname, "
    + "         e.spec_date, "
    + "         h.inspector, "
    + "         k.name, "
    + "         to_char(h.inspect_date, 'yyyy-mm-dd'), "
    + "         i.order_qty, "
    + "         b.vendor_price, "
    + "         h.ex_factory_price, "
    + "         b.xspo_discount, "
    + "         decode(a.po_currency_code, ' ', 'AUD', a.po_currency_code), "
    + "         b.xspo_trans_type, "
    + "         b.xspo_order_type, "
    + "         to_char(h.top_app_date, 'yyyy-mm-dd'), "
    + "         nvl(j.shipped_qty, 0), "
    + "         j.shipping_date, "
    + "         h.apess_comment, "
    + "         l.sht_category, "
    + "         case "
    //+ "           when g.cr_shortname like 'APESS3%' then 2 "
    + "           when p.order_control_yn <> 'Y' then 2 "
    + "           when a.po_order_status <> '99' "
    + "                and b.ex_factory_date is not null "
    + "                and to_char(b.ex_factory_date, 'yyyy') > '1900' "
    + "                and b.ex_factory_date < sysdate "
    + "                and j.shipping_date is null then 0 "
    + "           else 1 "
    + "         end ex_date_overdue, "
    + "         m.adminname, "
    + "         n.invoice_no, "
    + "         b.xspo_rrp, "
    + "         nvl(q.rate, 0), "
    + "         p.order_control_yn, "
    + "         p.mu_yn "
    + " from    por5mf4 a "
    + "         inner join xstpu22 b "
    + "           on a.po_order_no = b.xspo_po_order_no "
    + "           and a.backorder_flag = b.backorder_flag "
    + "         left outer join xpoaudt0 c "
    + "           on a.po_order_no = c.xpoa_po_order_no "
    + "           and a.backorder_flag = c.backorder_flag "
    + "           and c.xpoa_change_type = 'STAT' "
    + "           and c.xpoa_status = '00' "
    + "           and c.xpoa_old_value = '00' "
    + "           and c.xpoa_new_value = '25' "
    + "         left outer join xpoaudt0 d "
    + "           on a.po_order_no = d.xpoa_po_order_no "
    + "           and a.backorder_flag = d.backorder_flag "
    + "           and d.xpoa_change_type = 'STAT' "
    + "           and d.xpoa_status = '25' "
    + "           and d.xpoa_old_value = '25' "
    + "           and d.xpoa_new_value = '40' "
    + "         left outer join  "
    + "         ( "
    + "           select  substr(e.ql_description, 1, instr(e.ql_description, ' ') - 1) style_no, "
    + "                   max(substr(substr(e.ql_description, instr(e.ql_description, ' ') + 1), 5) "
    + "                   || substr(substr(e.ql_description, instr(e.ql_description, ' ') + 1), 3, 2) "
    + "                   || substr(substr(e.ql_description, instr(e.ql_description, ' ') + 1), 1, 2)) spec_date "
    + "           from    qlinks0 e "
    + "           where   e.ql_data_area = '" + _dataArea + "' "
    + "           and     e.ql_table = 'xspo-style-purchase-order' "
    + "           and     substr(e.ql_description, 1, instr(e.ql_description, ' ') - 1) is not null "
    + "           group by substr(e.ql_description, 1, instr(e.ql_description, ' ') - 1) "
    + "         ) e "
    + "           on to_char(b.xspo_style) = e.style_no "
    + "         left outer join sys5tbl5 f "
    + "           on a.po_user_name = f.sys_tbl_code "
    + "           and f.sys_tbl_type = 'RR' "
    + "         left outer join cre5mfi g "
    + "           on a.cre_accountcode = g.cre_accountcode "
    + "         left outer join po_style_etc@scm h "
    + "           on a.po_order_no = h.po_no "
    + "         inner join "
    + "         ( "
    + "           select  xsca_po_order_no, backorder_flag, sum(xsca_total_qty) order_qty "
    + "           from    xstcolal1 "
    + "           group by xsca_po_order_no, backorder_flag "
    + "         ) i "
    + "           on b.xspo_po_order_no = i.xsca_po_order_no "
    + "           and b.backorder_flag = i.backorder_flag "
    + "         left outer join "
    + "         ( "
    + "           select  a.po_no, a.shipping_date, sum(b.ttl_qty) shipped_qty "
    + "           from    packing_01t@scm a "
    + "                   inner join packing_03t@scm b "
    + "                     on a.packing_date||'' = b.packing_date "
    + "                     and a.po_no||'' = b.po_no "
    + "                     and a.style_no = b.style_no "
    //+ "           where   ( a.supplier_id = '" + scmid + "' "
    //+ "                     or a.supplier_id in (select /*+ PUSH_SUBQ */ subid||'' from login_02t@scm where id = '" + scmid + "') "
    //+ "                     or a.supplier_id in (select id from login_01t@scm where name like 'APESS3%') ) "
    + "           where   a.supplier_id in "
    + "                   ( "
    + "                     select  id "
    + "                     from    login_01t@scm "
    + "                     where   supplier_class in (select supplier_class from user_supplier_02t@scm where user_type = '" + usertype + "') "
    + "                   ) "
    + "           group by a.po_no, a.shipping_date "
    + "         ) j "
    + "           on a.po_order_no = j.po_no "
    + "         left outer join vg_inspector@scm k "
    + "           on h.inspector = k.code "
    + "         left outer join "
    + "         ( "
    + "           select z.stock_group, z.sht_category, y.shm_description "
    + "           from   stkhierachymst0 y "
    + "                  inner join stkhiertree3 z "
    + "                    on y.shm_code = z.sht_category "
    + "                    and y.shm_type = 3 "
    + "         ) l "
    + "           on b.xspo_stock_group = l.stock_group "
    + "         left outer join admin_01t@scm m "
    + "           on h.mr = m.adminid "
    + "         left outer join invoice_apess_02t@scm n "
    + "           on a.po_order_no = n.po_no "
    + "         inner join nad5mfa o "
    + "           on g.cre_accountcode = o.accountcode "
    + "         inner join user_supplier_02t@scm p "
    + "           on o.na_country_code = p.supplier_class "
    + "         left outer join supplier_commission@scm q "
    + "           on p.supplier_class = q.supplier_class "
    + "           and a.po_order_date between q.from_date and q.to_date "
    + " where   a.backorder_flag = ' ' "
    //+ " and     ( a.cre_accountcode = '" + scmid + "' "
    //+ "           or a.cre_accountcode in (select subid from login_02t@scm where id = '" + scmid + "') "
    //+ "           or a.cre_accountcode in (select id from login_01t@scm where name like 'APESS3%') ) "
    + " and     o.na_type = 'C' "
    + " and     p.user_type = '" + usertype + "' "
    + " and     ( a.po_order_status between '25' and '90' "
    + "           or (a.po_order_status = '99' and c.xpoa_ts_created is not null) ) ";

if (ag_po_no.length() > 0 || ag_style_no.length() > 0 || ag_invoice_no.length() > 0) {
  if (ag_po_no.length() > 0) {
    String sql_po_no = "'" + ag_po_no.replaceAll(",", "','") + "'";
    sql += " and    a.po_order_no in (" + sql_po_no + ") " ;
  }

  if (ag_style_no.length() > 0) {
    sql += " and    b.xspo_style like '" + ag_style_no + "%' " ;
  }

  if (ag_invoice_no.length() > 0) {
    sql += " and    n.invoice_no = '" + ag_invoice_no + "' ";
  }
} else {
  if (!ag_supplier.equals("")) {
    sql += " and    a.cre_accountcode = '" + ag_supplier + "' ";
  }

  if (!ag_brand.equals("")) {
    sql += " and    l.sht_category = '" + ag_brand + "' ";
  }

  if (!ag_buyer.equals("")) {
    sql += " and    a.po_user_name = '" + ag_buyer + "' ";
  }

  if (!ag_mr.equals("")) {
    sql += " and    h.mr = '" + ag_mr + "' ";
  }

  String tmpDate = "";
  if (ag_date_type.equals("SH")) {
    tmpDate = "b.ex_factory_date";
  } else if (ag_date_type.equals("DE")) {
    tmpDate = "a.po_arrival_date";
  } else if (ag_date_type.equals("PR")) {
    tmpDate = "c.xpoa_ts_created+10/24";
  //} else if (ag_date_type.equals("AS")) {
  //  tmpDate = "to_date(j.shipping_date, 'dd/mm/yy')";
  } else if (ag_date_type.equals("CF")) {
    tmpDate = "d.xpoa_ts_created+10/24";
  }

  sql += " and " + tmpDate + " >= to_date('" + ag_from_date + "', 'dd/mm/yyyy') "
       + " and " + tmpDate + " < to_date('" + ag_to_date + "', 'dd/mm/yyyy')+1 ";

  if (!ag_status.equals("")) {
    if (ag_status.equals("0")) {
      sql += " and    a.po_order_status between '25' and '90' ";
    } else if (ag_status.equals("40")) {
      sql += " and    a.po_order_status between '40' and '80' ";
    } else {
      sql += " and    a.po_order_status = '" + ag_status + "' ";
    }
  }
}

sql += " order by ex_date_overdue, ";

if ( ag_orderby.equals("1"))  {
  sql += " c.xpoa_ts_created ";
}
else if ( ag_orderby.equals("2"))  {
  sql += " f.sys_description ";
}
else if ( ag_orderby.equals("3"))  {
  sql += " a.po_order_no ";
}
else if ( ag_orderby.equals("4"))  {
  sql += " a.po_arrival_date " ;
}
else if ( ag_orderby.equals("5"))  {
  sql += " b.ex_factory_date " ;
}
else if ( ag_orderby.equals("6"))  {
  sql += " g.cr_shortname ";
}
else if ( ag_orderby.equals("7"))  {
  sql += " a.po_arrival_date, g.cr_shortname " ;
}
else if ( ag_orderby.equals("8"))  {
  sql += " substr(j.shipping_date, 6)||substr(j.shipping_date, 3, 2)||substr(j.shipping_date, 1, 2) ";
}
else if ( ag_orderby.equals("9"))  {
  sql += " h.mr ";
}
//out.println(sql); if (true) return;

try {

  dbPool = DBConnManager.getInstance();
  connPronto = dbPool.getConnection("pronto");
  matrix = new dbconn.MatrixDataSet();
  dataProcess = new dbconn.DataProcess();

  // po list
  iRet = dataProcess.RetrieveData(sql, matrix, connPronto);
  connPronto.commit();

} catch (Exception e) {
  if (connPronto != null) {
    try { connPronto.rollback(); } catch (Exception ex) {}
  }

  System.out.println("Exception in dsk_po_status_excel : " + e.getMessage());
  throw e;
} finally {
  if (connPronto != null) {
    dbPool.freeConnection("pronto", connPronto);
  }
}

// print po list
for (int i = 0; i < iRet; i++) {
  int j = 0;
  String pr_date = matrix.getRowData(i).getData(j++);
  String sc_confirmed_date = matrix.getRowData(i).getData(j++);
  String po_no = matrix.getRowData(i).getData(j++);
  String style_no = matrix.getRowData(i).getData(j++);
  String brandName = matrix.getRowData(i).getData(j++);
  String po_status = matrix.getRowData(i).getData(j++);
  String order_date = matrix.getRowData(i).getData(j++);
  String ex_factory_date = matrix.getRowData(i).getData(j++);
  String delivery_date = matrix.getRowData(i).getData(j++);
  String buyer = matrix.getRowData(i).getData(j++);
  String supplier_name = matrix.getRowData(i).getData(j++);
  String spec_date = matrix.getRowData(i).getData(j++);
  String inspector = matrix.getRowData(i).getData(j++);
  String inspector_name = matrix.getRowData(i).getData(j++);
  String inspect_date = matrix.getRowData(i).getData(j++);
  int order_qty = Integer.parseInt(matrix.getRowData(i).getData(j++));
  double currency_unit_price = Double.parseDouble(matrix.getRowData(i).getData(j++));
  String org_ex_factory_price = matrix.getRowData(i).getData(j++);
  double discount_price = Double.parseDouble(matrix.getRowData(i).getData(j++));
  String currency_type = matrix.getRowData(i).getData(j++);
  String trans_type = matrix.getRowData(i).getData(j++);
  String order_type = matrix.getRowData(i).getData(j++);
  String top_app_date = matrix.getRowData(i).getData(j++);
  int shipped_qty = Integer.parseInt(matrix.getRowData(i).getData(j++));
  String shipping_date = matrix.getRowData(i).getData(j++);
  String apess_comment = matrix.getRowData(i).getData(j++);
  String brand = matrix.getRowData(i).getData(j++);
  String ex_date_overdue = matrix.getRowData(i).getData(j++);
  String mrName = matrix.getRowData(i).getData(j++);
  String invoice_no = matrix.getRowData(i).getData(j++);
  double rrp = Double.parseDouble(matrix.getRowData(i).getData(j++));
  double commission_rate = Double.parseDouble(matrix.getRowData(i).getData(j++));
  String orderControlYn = matrix.getRowData(i).getData(j++);
  String muYn = matrix.getRowData(i).getData(j++);

  // re-calculate price to include MU
/*
  if (currency_unit_price > 0.0d && supplier_name.toUpperCase().startsWith("APESS(")
      && order_date.compareTo("20090101") >= 0 && order_date.compareTo("20090630") <= 0) {
    if ((usertype.equals("P") && usergroup.equals("S")) 
        || (usertype.equals("P") && usergroup.equals("A") && M.equals("Y"))) {
      //currency_unit_price *= (1.0d + _MURate);
      currency_unit_price = Math.round(currency_unit_price*(1.0d + _MURate)*100.0d)/100.0d;
    }
  }
*/
  if (currency_unit_price > 0.0d && muYn.equals("Y")
      && order_date.compareTo("20090101") >= 0 && order_date.compareTo("20090630") <= 0) {
    if (usertype.startsWith("C") && (usergroup.equals("S") || (usergroup.equals("A") && M.equals("Y")))) {
      currency_unit_price = Math.round(currency_unit_price*(1.0d + _MURate)*100.0d)/100.0d;
    }
  }
  
  // calculate ex_factory_price
  double ex_factory_price = 0.0d;
  double ex_dc_price = 0.0d;

/*
  if (supplier_name.toUpperCase().startsWith("APESS(") || supplier_name.toUpperCase().startsWith("APESS2(")) {
    String tmp_start_date = "20101108";
    double tmp_rate = _EXRate;
  
    if (order_date.compareTo(tmp_start_date) < 0) {
      tmp_start_date = "20100531";
      tmp_rate = 0.05d;

      if (order_date.compareTo(tmp_start_date) < 0) {
        tmp_start_date = "20090701";
        tmp_rate = 0.15d;
  
        if (supplier_name.toUpperCase().startsWith("APESS2(")) {
          tmp_start_date = "20100315";
          tmp_rate = 0.07d;
        }
    
        if (order_date.compareTo(tmp_start_date) < 0) {
          tmp_rate = 0.0d;
        }
      }
    }

    if (!org_ex_factory_price.equals("")) {
      ex_factory_price = Double.parseDouble(org_ex_factory_price);
    } else {
      ex_factory_price = currency_unit_price/(1.0d + tmp_rate);
    }
    
    // calculate ex_dc_price
    if (discount_price > 0.0d && ex_factory_price > 0.0d) {
      tmp_rate = Math.round((currency_unit_price/ex_factory_price - 1)*100.0d)/100.0d;
      ex_dc_price = Math.round(discount_price*100.0d/(1.0d + tmp_rate))/100.0d;
    }
  }
*/
  if (orderControlYn.equals("Y")) {
    if (!org_ex_factory_price.equals("")) {
      ex_factory_price = Double.parseDouble(org_ex_factory_price);
    } else {
      ex_factory_price = Math.round(currency_unit_price*100.0d/(1.0d + commission_rate))/100.0d;
    }

    // calculate ex_dc_price
    if (discount_price > 0.0d && ex_factory_price > 0.0d) {
      double tmp_rate = Math.round((currency_unit_price/ex_factory_price - 1)*100.0d)/100.0d;
      ex_dc_price = Math.round(discount_price*100.0d/(1.0d + tmp_rate))/100.0d;
    }
  }

  // sum unit price amount and ex-factory price amount
  double unit_price_amount = 0.0d;
  double ex_factory_price_amount = 0.0d;

  //if (supplier_name.toUpperCase().startsWith("APESS(") || supplier_name.toUpperCase().startsWith("APESS2(")) {
  if (orderControlYn.equals("Y")) {
    if (currency_unit_price > 0.0d) {
      unit_price_amount = shipped_qty*(currency_unit_price - discount_price);
    }
    if (ex_factory_price > 0.0d) {
      //ex_factory_price_amount = shipped_qty*(ex_factory_price - discount_price);
      ex_factory_price_amount = shipped_qty*(ex_factory_price - ex_dc_price);
    }
  }
  ///////////////

  if (shipping_date.length() == 8) {
    shipping_date = "20" + shipping_date.substring(6) + shipping_date.substring(3, 5) + shipping_date.substring(0, 2);
  }

  if (!spec_date.equals("")) {
    spec_date = spec_date.substring(0, 4) + "-" + spec_date.substring(4, 6) + "-" + spec_date.substring(6);
  }

  outS += "<tr>"
        + " <td nowrap>" + pr_date + "</td>"
        + " <td nowrap>" + sc_confirmed_date + "</td>"
        + " <td>" + brandName + "</td>"
        + " <td>" + po_no + "</td>"
        + " <td>" + style_no + "</td>"
        + " <td>" + supplier_name + "</td>"
        + " <td nowrap>" + ex_factory_date + "</td>"
        + " <td nowrap>" + delivery_date + "</td>"
        + " <td>" + trans_type + "</td>"
        + " <td>" + buyer + "</td>"
        + " <td>" + mrName + "</td>"
        + " <td nowrap>" + (order_type.equals("R") ? order_type : top_app_date) + "</td>"
        + " <td align='right'>" + order_qty + "</td>"
        + " <td align='right'>" + StringUtil.formatNumber(rrp, MONEY_FORMAT) + "</td>"
        + " <td align='right'>" + (currency_unit_price > 0.0d ? StringUtil.formatNumber(currency_unit_price, MONEY_FORMAT) : "TBA") + "</td>"
        //+ " <td align='right'>" + (supplier_name.toUpperCase().startsWith("APESS(") || supplier_name.toUpperCase().startsWith("APESS2(") ? (ex_factory_price > 0.0d ? StringUtil.formatNumber(ex_factory_price, MONEY_FORMAT) : "TBA") : "") + "</td>"
        + " <td align='right'>" + (orderControlYn.equals("Y") ? (ex_factory_price > 0.0d ? StringUtil.formatNumber(ex_factory_price, MONEY_FORMAT) : "TBA") : "") + "</td>"
        + " <td align='right'>" + (discount_price > 0.0d ? StringUtil.formatNumber(discount_price, MONEY_FORMAT) : "") + "</td>"
        + " <td align='right'>" + (ex_dc_price > 0.0d ? StringUtil.formatNumber(ex_dc_price, MONEY_FORMAT) : "") + "</td>"
        + " <td>" + currency_type + "</td>"
        + " <td>" + po_status + "</td>"
        + " <td>" + spec_date + "</td>"
        + " <td></td>"                      // for sample approve date
        + " <td>" + inspector + "</td>"
        + " <td>" + inspector_name + "</td>"
        + " <td nowrap>" + inspect_date + "</td>"
        + " <td align='right'>" + shipped_qty + "</td>"
        + " <td align='right'>"
        //+ (supplier_name.toUpperCase().startsWith("APESS(") || supplier_name.toUpperCase().startsWith("APESS2(")
        + (orderControlYn.equals("Y") ? (currency_unit_price > 0.0d ? StringUtil.formatNumber(unit_price_amount, MONEY_FORMAT) : "") : "") + "</td>"
        + " <td align='right'>"
        //+ (supplier_name.toUpperCase().startsWith("APESS(") || supplier_name.toUpperCase().startsWith("APESS2(")
        + (orderControlYn.equals("Y") ? (ex_factory_price > 0.0d ? StringUtil.formatNumber(ex_factory_price_amount, MONEY_FORMAT) : "") : "") + "</td>"
        + " <td nowrap>" + shipping_date + "</td>"
        + " <td>" + invoice_no + "</td>"
        + " <td>" + apess_comment + "</td>"
        + "</tr>";
}

      out.write(_jsp_string2, 0, _jsp_string2.length);
      out.print(( outS ));
      out.write(_jsp_string3, 0, _jsp_string3.length);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 5783496155892875126L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("order/dsk_po_status_excel.jsp"), 7639418841816757403L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("login_check.jsp"), 5313538553479869376L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("common/CommonVars.jsp"), 5055347195946766837L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string2;
  private final static char []_jsp_string3;
  private final static char []_jsp_string1;
  private final static char []_jsp_string0;
  static {
    _jsp_string2 = "\n<HTML>\n<HEAD>\n</HEAD>\n<body>\n<table width=\"2900\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<TR align='center'>\n  <TD>PR Date</TD>\n  <TD>Confirmed</TD>\n  <TD>Brand</TD>\n  <TD>PO No.</TD>\n  <TD>Style No.</TD>\n  <TD>Supplier</TD>\n  <TD>Ship Date</TD>\n  <TD>Delivery</TD>\n  <TD>Trans Type</TD>\n  <TD>Buyer</TD>\n  <TD>MR</TD>\n  <TD>Top App Date</TD>\n  <TD>Order Qty</TD>\n  <TD>RRP</TD>\n  <TD>Unit Price</TD>\n  <TD>Ex-Factory Price</TD>\n  <TD>D/C Price</TD>\n  <TD>Ex-D/C Price</TD>\n  <TD>Currency</TD>\n  <TD>PO Status</TD>\n  <TD>Spec Sheet</TD>\n  <TD>Approve Date</TD>\n  <TD>Inspector</TD>\n  <TD>Inspector Name</TD>\n  <TD>Inspect Date</TD>\n  <TD>Shipped Qty</TD>\n  <TD>Amount(U/P)</TD>\n  <TD>Amount(F/P)</TD>\n  <TD>Act. Ship Date</TD>\n  <TD>Invoice No.</TD>\n  <TD>Comment</TD>\n</TR>\n".toCharArray();
    _jsp_string3 = "\n</TABLE>\n</BODY>\n</HTML>\n".toCharArray();
    _jsp_string1 = "\n\n".toCharArray();
    _jsp_string0 = "\n\n\n\n\n\n".toCharArray();
  }
}
